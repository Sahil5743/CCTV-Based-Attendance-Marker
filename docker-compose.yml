version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: attendance_mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: attendance_system
    volumes:
      - mongodb_data:/data/db
      - ./server/scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - attendance_network

  # Redis for session management and caching
  redis:
    image: redis:7.2-alpine
    container_name: attendance_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - attendance_network

  # Backend API Server
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: attendance_backend
    restart: "no"
    ports:
      - "5000:5000"
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGODB_URI: ${MONGODB_URI}
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      EMAIL_USER: ${EMAIL_USER}
      EMAIL_PASS: ${EMAIL_PASS}
      SMTP_HOST: ${SMTP_HOST:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./server/uploads:/app/uploads
    networks:
      - attendance_network

  # Frontend Next.js Application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: attendance_frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:5000/api
      NEXT_PUBLIC_SOCKET_URL: http://localhost:5000
    depends_on:
      - backend
    networks:
      - attendance_network

  # WebRTC Signaling Server
  webrtc-signaling:
    build:
      context: ./webrtc-server
      dockerfile: Dockerfile
    container_name: attendance_webrtc
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      PORT: 8080
      CORS_ORIGIN: http://localhost:3000
    networks:
      - attendance_network

  # RTSP to WebRTC Bridge
  rtsp-bridge:
    image: bluenviron/mediamtx:latest
    container_name: attendance_rtsp_bridge
    restart: unless-stopped
    ports:
      - "8554:8554"  # RTSP
      - "8889:8889"  # WebRTC
      - "8890:8890"  # API
    volumes:
      - ./rtsp-config/mediamtx.yml:/mediamtx.yml
    networks:
      - attendance_network

volumes:
  mongodb_data:
  redis_data:

networks:
  attendance_network:
    driver: bridge
